package com.example.huiyiqiandaotv.beans;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAN_CHUANG_BEAN".
*/
public class TanChuangBeanDao extends AbstractDao<TanChuangBean, Long> {

    public static final String TABLENAME = "TAN_CHUANG_BEAN";

    /**
     * Properties of entity TanChuangBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Touxiang = new Property(2, String.class, "touxiang", false, "TOUXIANG");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
        public final static Property Bytes = new Property(4, byte[].class, "bytes", false, "BYTES");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property Idid = new Property(6, long.class, "idid", false, "IDID");
        public final static Property Bumen = new Property(7, String.class, "bumen", false, "BUMEN");
        public final static Property IsLight = new Property(8, boolean.class, "isLight", false, "IS_LIGHT");
        public final static Property Gonghao = new Property(9, String.class, "gonghao", false, "GONGHAO");
        public final static Property Zhiwei = new Property(10, String.class, "zhiwei", false, "ZHIWEI");
    }


    public TanChuangBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TanChuangBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAN_CHUANG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TOUXIANG\" TEXT," + // 2: touxiang
                "\"REMARK\" TEXT," + // 3: remark
                "\"BYTES\" BLOB," + // 4: bytes
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"IDID\" INTEGER NOT NULL ," + // 6: idid
                "\"BUMEN\" TEXT," + // 7: bumen
                "\"IS_LIGHT\" INTEGER NOT NULL ," + // 8: isLight
                "\"GONGHAO\" TEXT," + // 9: gonghao
                "\"ZHIWEI\" TEXT);"); // 10: zhiwei
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAN_CHUANG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TanChuangBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String touxiang = entity.getTouxiang();
        if (touxiang != null) {
            stmt.bindString(3, touxiang);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        byte[] bytes = entity.getBytes();
        if (bytes != null) {
            stmt.bindBlob(5, bytes);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getIdid());
 
        String bumen = entity.getBumen();
        if (bumen != null) {
            stmt.bindString(8, bumen);
        }
        stmt.bindLong(9, entity.getIsLight() ? 1L: 0L);
 
        String gonghao = entity.getGonghao();
        if (gonghao != null) {
            stmt.bindString(10, gonghao);
        }
 
        String zhiwei = entity.getZhiwei();
        if (zhiwei != null) {
            stmt.bindString(11, zhiwei);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TanChuangBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String touxiang = entity.getTouxiang();
        if (touxiang != null) {
            stmt.bindString(3, touxiang);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        byte[] bytes = entity.getBytes();
        if (bytes != null) {
            stmt.bindBlob(5, bytes);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getIdid());
 
        String bumen = entity.getBumen();
        if (bumen != null) {
            stmt.bindString(8, bumen);
        }
        stmt.bindLong(9, entity.getIsLight() ? 1L: 0L);
 
        String gonghao = entity.getGonghao();
        if (gonghao != null) {
            stmt.bindString(10, gonghao);
        }
 
        String zhiwei = entity.getZhiwei();
        if (zhiwei != null) {
            stmt.bindString(11, zhiwei);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TanChuangBean readEntity(Cursor cursor, int offset) {
        TanChuangBean entity = new TanChuangBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // touxiang
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // bytes
            cursor.getInt(offset + 5), // type
            cursor.getLong(offset + 6), // idid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bumen
            cursor.getShort(offset + 8) != 0, // isLight
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gonghao
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // zhiwei
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TanChuangBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTouxiang(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBytes(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setIdid(cursor.getLong(offset + 6));
        entity.setBumen(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsLight(cursor.getShort(offset + 8) != 0);
        entity.setGonghao(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setZhiwei(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TanChuangBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TanChuangBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TanChuangBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
