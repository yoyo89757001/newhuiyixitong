package com.example.huiyiqiandaotv.beans;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEN_DI_REN_SHU_BEAN".
*/
public class BenDiRenShuBeanDao extends AbstractDao<BenDiRenShuBean, Long> {

    public static final String TABLENAME = "BEN_DI_REN_SHU_BEAN";

    /**
     * Properties of entity BenDiRenShuBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Y1 = new Property(1, int.class, "y1", false, "Y1");
        public final static Property YShen = new Property(2, int.class, "yShen", false, "Y_SHEN");
        public final static Property YShi = new Property(3, int.class, "yShi", false, "Y_SHI");
        public final static Property YTeyao = new Property(4, int.class, "yTeyao", false, "Y_TEYAO");
        public final static Property N1 = new Property(5, int.class, "n1", false, "N1");
        public final static Property NShen = new Property(6, int.class, "nShen", false, "N_SHEN");
        public final static Property NShi = new Property(7, int.class, "nShi", false, "N_SHI");
        public final static Property NTeyao = new Property(8, int.class, "nTeyao", false, "N_TEYAO");
    }


    public BenDiRenShuBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BenDiRenShuBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEN_DI_REN_SHU_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"Y1\" INTEGER NOT NULL ," + // 1: y1
                "\"Y_SHEN\" INTEGER NOT NULL ," + // 2: yShen
                "\"Y_SHI\" INTEGER NOT NULL ," + // 3: yShi
                "\"Y_TEYAO\" INTEGER NOT NULL ," + // 4: yTeyao
                "\"N1\" INTEGER NOT NULL ," + // 5: n1
                "\"N_SHEN\" INTEGER NOT NULL ," + // 6: nShen
                "\"N_SHI\" INTEGER NOT NULL ," + // 7: nShi
                "\"N_TEYAO\" INTEGER NOT NULL );"); // 8: nTeyao
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEN_DI_REN_SHU_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BenDiRenShuBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getY1());
        stmt.bindLong(3, entity.getYShen());
        stmt.bindLong(4, entity.getYShi());
        stmt.bindLong(5, entity.getYTeyao());
        stmt.bindLong(6, entity.getN1());
        stmt.bindLong(7, entity.getNShen());
        stmt.bindLong(8, entity.getNShi());
        stmt.bindLong(9, entity.getNTeyao());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BenDiRenShuBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getY1());
        stmt.bindLong(3, entity.getYShen());
        stmt.bindLong(4, entity.getYShi());
        stmt.bindLong(5, entity.getYTeyao());
        stmt.bindLong(6, entity.getN1());
        stmt.bindLong(7, entity.getNShen());
        stmt.bindLong(8, entity.getNShi());
        stmt.bindLong(9, entity.getNTeyao());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BenDiRenShuBean readEntity(Cursor cursor, int offset) {
        BenDiRenShuBean entity = new BenDiRenShuBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // y1
            cursor.getInt(offset + 2), // yShen
            cursor.getInt(offset + 3), // yShi
            cursor.getInt(offset + 4), // yTeyao
            cursor.getInt(offset + 5), // n1
            cursor.getInt(offset + 6), // nShen
            cursor.getInt(offset + 7), // nShi
            cursor.getInt(offset + 8) // nTeyao
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BenDiRenShuBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setY1(cursor.getInt(offset + 1));
        entity.setYShen(cursor.getInt(offset + 2));
        entity.setYShi(cursor.getInt(offset + 3));
        entity.setYTeyao(cursor.getInt(offset + 4));
        entity.setN1(cursor.getInt(offset + 5));
        entity.setNShen(cursor.getInt(offset + 6));
        entity.setNShi(cursor.getInt(offset + 7));
        entity.setNTeyao(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BenDiRenShuBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BenDiRenShuBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BenDiRenShuBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
